import dash
from dash import html, dcc
from dash.dependencies import Output, Input
import plotly.graph_objs as go
import psutil
from functools import lru_cache

app = dash.Dash(__name__)

# Color palette
colors = {
    'background':'#000000',  # Black background color
    'text': '#70feff',  # Light violet text color
    'card_background': '#002020',  # Violet card background
}

# Styling classes
card_style = {'padding': '20px', 'border-radius': '10px', 'box-shadow': '0 4px 8px 0 rgba(0,0,0,0.2)', 'margin-bottom': '20px', 'background-color': colors['card_background'], 'color': colors['text']}
title_style = {'text-align': 'center', 'margin-bottom': '30px', 'color': colors['text']}
subtitle_style = {'text-align': 'center', 'margin-bottom': '10px', 'color': colors['text']}
list_style = {'list-style-type': 'none', 'padding': '0', 'margin': '0', 'text-align': 'center', 'color': colors['text']}  # Text color added here

vulnerable_folders = {
    'System32': 10,
    'Program Files': 8,
    'Windows': 12
}
@lru_cache(maxsize=None)
def get_system_stats():
    cpu_percent = psutil.cpu_percent()
    print("CPU Usage:", cpu_percent)  # Debug print
    memory_percent = psutil.virtual_memory().percent
    disk_percent = psutil.disk_usage('/').percent

    stats_data = {
        'CPU Usage': cpu_percent,
        'Memory Usage': memory_percent,
        'Disk Usage': disk_percent
    }

    return stats_data

app.layout = html.Div(style={'backgroundColor': colors['background']}, children=[
    html.H1("System Monitoring and Security Dashboard", style=title_style),
    html.Div([
        html.Div([
            html.H2("System Statistics", className='mb-3', style=subtitle_style),
            dcc.Graph(id='system-stats-pie')
        ], className='card', style=card_style),

        html.Div([
            html.H2("Vulnerable Files Count in Major Vulnerable Folders", className='mb-3', style=subtitle_style),
            html.Ul([html.Li(f"{folder}: {count} vulnerable files") for folder, count in vulnerable_folders.items()], style=list_style)
        ], className='card', style=card_style),

        html.Div([
            html.H2("Network Traffic Over Time", className='mb-3', style=subtitle_style),
            dcc.Graph(id='network-traffic')
        ], className='card', style=card_style),
    ], className='container'),

    dcc.Interval(id='interval-component', interval=5000, n_intervals=0)
])

@app.callback(
    Output('system-stats-pie', 'figure'),
    [Input('interval-component', 'n_intervals')]
)
def update_system_stats_pie(n):
    stats_data = get_system_stats()
    labels = list(stats_data.keys())
    values = list(stats_data.values())

    return {
        'data': [go.Pie(labels=labels, values=values)],
        'layout': {
            'title': 'System Statistics',
            'paper_bgcolor': 'rgba(0,0,0,0)',  # Transparent background
            'font': {'color': colors['text']}
        }
    }

@app.callback(
    Output('network-traffic', 'figure'),
    [Input('interval-component', 'n_intervals')]
)
def update_network_traffic(n):
    timestamps = ['00:00', '01:00', '02:00', '03:00', '04:00']
    traffic_volume = [100, 150, 120, 200, 180]

    return {
        'data': [go.Scatter(x=timestamps, y=traffic_volume, mode='lines')],
        'layout': {
            'title': 'Network Traffic Over Time',
            'xaxis': {'title': 'Time', 'tickfont': {'color': colors['text']}, 'color': colors['text']},
            'yaxis': {'title': 'Traffic Volume', 'tickfont': {'color': colors['text']}, 'color': colors['text']},
            'paper_bgcolor': 'rgba(0,0,0,0)',  # Transparent background
            'plot_bgcolor': colors['card_background'],
            'font': {'color': colors['text']}
        }
    }

if __name__ == '__main__':
    app.run_server(debug=True)
